# AIRS MCP-FS Configuration for Claude Desktop Integration
# This file configures filesystem access optimized for Claude Desktop via MCP
# Place this file in a directory accessible to your MCP server and reference it 
# with the AIRS_MCP_FS_CONFIG_DIR environment variable or --config-dir flag

[server]
name = "airs-mcp-fs"
version = "0.1.0"

[binary]
# Maximum file size in bytes (50MB for text files)
max_file_size = 52428800
# Binary processing disabled for security
binary_processing_disabled = true

[security.filesystem]
# Allowed paths for Claude Desktop access
# Customize these paths based on your project structure and security requirements
allowed_paths = [
    # Current project directory and subdirectories
    "~/Projects/airsstack/airsstack/**/*",
    
    # Common development directories (adjust paths as needed)
    "~/Projects/**/*.{rs,py,js,ts,jsx,tsx,go,java,kt,scala}",
    "~/Projects/**/*.{md,txt,rst,json,toml,yaml,yml}",
    "~/Projects/**/{README*,CHANGELOG*,LICENSE*,Cargo.toml,package.json}",
    
    # Documents directory (limited access)
    "~/Documents/**/*.{md,txt,rst}",
    "~/Documents/**/{README*,CHANGELOG*}",
    
    # Desktop files (for quick access to notes and docs)
    "~/Desktop/**/*.{md,txt,rst,json,toml,yaml,yml}",
]

# Always denied paths for security
denied_paths = [
    "**/.git/**",           # Git internals
    "**/.env*",             # Environment files with secrets
    "~/.*/**",              # Hidden system directories
    "**/id_rsa*",           # SSH keys
    "**/credentials*",       # Credential files
    "**/secrets*",          # Secret files
    "/etc/**",              # System configuration
    "/var/**",              # System directories
    "/tmp/**",              # Temporary files
    "**/target/**",         # Rust build artifacts
    "**/node_modules/**",   # Node.js dependencies
    "**/__pycache__/**",    # Python cache
    "**/.pytest_cache/**", # PyTest cache
]

[security.operations]
# Allow read operations for most files
read_allowed = true
# Allow directory creation for project organization
create_dir_allowed = true
# Development mode: allow writes without strict policy requirements
write_requires_policy = false
# Safety: require explicit delete permissions
delete_requires_explicit_allow = true

# Security policies for different file types
[security.policies.source_code]
patterns = [
    "**/*.{rs,py,js,ts,jsx,tsx}",
    "**/*.{c,cpp,h,hpp}",
    "**/*.{java,kt,scala,go}",
    "**/*.{rb,php,swift,dart}",
    "**/*.{html,css,scss,sass}",
]
operations = ["read", "write"]
risk_level = "low"
description = "Source code files - safe for development work"

[security.policies.documentation]
patterns = [
    "**/*.{md,txt,rst,adoc}",
    "**/README*",
    "**/CHANGELOG*",
    "**/LICENSE*",
    "**/CONTRIBUTING*",
    "**/*.{org,tex}",
]
operations = ["read", "write"]
risk_level = "low"
description = "Documentation files - safe for editing and creation"

[security.policies.config_files]
patterns = [
    "**/Cargo.toml",
    "**/*.{json,yaml,yml,toml}",
    "**/*.{xml,ini,conf}",
    "**/package.json",
    "**/tsconfig.json",
    "**/*.config.{js,ts}",
]
operations = ["read", "write"]
risk_level = "medium"
description = "Configuration files - review changes carefully"

[security.policies.development_tools]
patterns = [
    "**/.gitignore",
    "**/.gitattributes",
    "**/test/**",
    "**/tests/**",
    "**/examples/**",
    "**/*.test.{js,ts,py,rs}",
    "**/*.spec.{js,ts,py,rs}",
]
operations = ["read", "write", "delete"]
risk_level = "low"
description = "Development tools and test files - full access for productivity"

[security.policies.build_artifacts]
patterns = [
    "**/target/**",
    "**/dist/**",
    "**/build/**",
    "**/*.{tmp,bak,log}",
    "**/node_modules/**",
    "**/__pycache__/**",
    "**/.pytest_cache/**",
    "**/coverage/**",
]
operations = ["read", "delete"]
risk_level = "low"
description = "Build artifacts and cache - safe to clean and rebuild"